name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests
      run: ./gradlew test
    
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: build/test-results/test/

  deploy-dev:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Deploy to Dev Environment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          echo "🚀 Deploying to Development Environment"
          cd ~/testproject/backend
          git checkout develop
          git pull origin develop
          
          # 개발 환경용 태그
          docker build -t pd-test-backend:dev .
          
          # 개발 환경은 다른 포트나 컨테이너명 사용 가능
          # docker-compose -f docker-compose.dev.yml up -d backend
          
          echo "✅ Development deployment completed!"

  deploy-prod:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to Production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          echo "🚀 Deploying to Production"
          cd ~/testproject/backend
          git checkout main
          git pull origin main
          
          # Docker 이미지 빌드
          docker build -t pd-test-backend:latest .
          
          # 서비스 재시작
          cd ~/testproject
          docker-compose stop backend
          docker-compose rm -f backend
          docker-compose up -d backend
          
          # 헬스체크
          sleep 10
          curl -f http://localhost:8080 || exit 1
          
          # Slack 알림 (선택사항)
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"Backend 운영 배포 완료!"}' \
          #   ${{ secrets.SLACK_WEBHOOK }}
          
          echo "✅ Production deployment completed!"
